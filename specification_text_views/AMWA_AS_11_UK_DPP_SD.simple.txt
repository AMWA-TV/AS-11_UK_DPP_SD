# **[Work In Progress]** AS-11 UK DPP SD (MXF Program Contribution - UK DPP SD)

_This file is one rendering / view of this AMWA Specification and is a part of the Specification repository. Visit the AMWA [web page for this Specification](http://amwa.tv/projects/AS-11-UK-DPP.shtml) which has information about revisions and current development._


# AS-11: Media Contribution File Formats

The AMWA AS-11 Specifications define constrained media file formats for the delivery of finished media assets to a broadcaster or publisher. Each Specification is developed for a particular business purpose.


# Purpose of the AS-11 UK DPP SD Specification

## Aims

This Specification aims to define a file format for the delivery of finished SD TV Programmes to UK [Digital Production Partnership](https://www.digitalproductionpartnership.co.uk/) (DPP) broadcasters. It aims to define:

* a vendor-neutral and broadcaster-neutral package, using open technologies for delivery of finished programming from program producers and program distributors to broadcast stations
* a package that is sufficiently simple so as to limit the scope for interoperability problems
* a self-contained & play-out ready package

## Some notes on practical use

* The content may be delivered at the broadcast bit-rate, picture format and aspect ratio, or it may be transcoded at the broadcast station to the bit-rates and formats required for particular broadcast channels. Similar transcoding may be applied to audio and captions; additionally, specific audio and caption tracks may be selected for different broadcast channels.
* The content may be pre-packaged for broadcast without further changes or it may be segmented for ease of insertion or replacement of interstitials.
* There may be more than one package per programme.
* The package may contain some pre and post roll content not for transmission.


# Understanding the Specification Blocks Tree

## The Rules-Based Specification Framework
This Specification has been written using a 'Rules-based Specification Framework'. In this framework, each 'constraint' or 'rule' is expressed as a 'Component' which can be unambiguosly identified by its ID (which is a URL). These Components assemble into 'networks' or 'webs' to form complete Specifications, with many Components being re-used across a number of Specifications. Through this approach machine processable Specifications are developed which are less ambiguous and easier to implement and test.

* **Blocks (B)** are the fundamental 'building bricks' of a Specification -- they provide its _structure_.
* A Block can either link to **Artefacts (A)** that it 'owns' or link to other Blocks.
* Artefacts provide the real _content_ of a Specification. They may contain textual statements, code excerpts, or tables, for example.
* Artefacts often refer to **Terms (T)** and **References (R)** as well as Blocks.
* Blocks are sometimes described by **Notes (N)**.
* There are two special types of Block which allow the value of one Block to be set by another Block:
  * **Parameter Key Block (K)** -- this is a Block whose value must be set elsewhere in the Specification (it effectively defines a "variable" or an "argument").
  * **Parameter Value Block (V)** -- this is a Block which sets the value of a specific Parameter Key Block.

In this document the network of Blocks (and other Components) that form the Specification are shown as a 'tree': the Specification Blocks Tree. The letters in brackets above are used in the tree to identify the different kinds of Component.

## Conformance

An implementation complies with this Specification if it complies with the Components from which it is constructed, as shown in the Specification Blocks Tree, subject to the following provisions:

* An implementation complies with a Block if it complies with all of the normative Components from which it is constructed. "Informative" items (as defined below) do not have to be complied with.
* "Note" Components are considered "informative". All other Components are considered "normative" unless otherwise noted.
* Compliance with some Blocks is not mandatory. Such Blocks are marked with an alternative "conformance" state (such as "optional" or "recommended").
* The name / title of a Component is considered "informative".
* Prose Artefacts are written as statements of fact. An implementation complies with one of these Artefacts if the stated fact is True for the implementation.
* Other Artefacts are "data files" (such as SMPTE Metadata Registers XML files or XML Schema files). Some of these may be _partially_ rendered below. An implementation must always fully comply with these data files -- links are provided to such data files in the Specification Blocks Tree.
* Note that an Artefact does not always make sense on its own: all of the Artefacts contained within a Block need to be read (in order) to understand the Block fully and correctly.




# The Specification Blocks Tree

[B] File Format
    [B] Core MXF constraints
        Conformance: mandatory
        [B] MXF File Format
            Conformance: mandatory
            [A] The file conforms to <SMPTE ST 377:2004>.
            [N] Later versions of MXF
                [A] This does not prohibit the use of MXF version 1.3 (SMPTE ST 377-1:2011) for SD files. SMPTE encourages users to apply the most recent edition of standards where possible.
        [B] Operational pattern 1a
            Conformance: mandatory
            [A] The file conforms to <SMPTE ST 378:2004>.
            [N] Implementation Notes
                [A] The file must be labelled as OP1a in the Operational Pattern property of all Partition Packs and the Preface Set, as required by <SMPTE ST 377-1:2011> in Section 7.1 and Annex A, respectively.
        [B] Closed Complete Header
            Conformance: mandatory
            [A] The <Header Partition> is "Closed" and "Complete".
            [N] Implementation Notes
                [A] Byte 15 of the Header Partition Pack Key must be set to 04h and all Header Metadata must have correct values. Hence 'Distinguished Values' cannot be used for 'Best Effort' properties. See Section 6.2.3 of SMPTE ST 377-1:2011 for a full explanation.
        [B] Generic Container
            Conformance: mandatory
            [A] The file uses the <Generic Container>.
        [B] Internal Essence
            Conformance: mandatory
            [A] The <Generic Container> is internal to the file.
        [B] Strict Frame Wrapping
            Conformance: mandatory
            [A] The <Generic Container> uses <Frame Wrapping>.
            [A] If the <Generic Container> contains <Picture Essence> then the related <Edit Unit> duration is equal to the duration of a video frame of the <Picture Essence>.
            [N] Implementation Notes
                [A] For example, this means that if the <Picture Essence> is field-encoded then each <Edit Unit> contains the data assosiated with both of the video fields for a video frame.
        [B] One-to-one Track mapping
            Conformance: mandatory
            [A] Each <Essence Track> in the <Top-Level File Package> is referenced by exactly one <Essence Track> in the <Material Package>.
            [N] No division/combination of Audio Channels between Sound Tracks
                [A] This prohibits:
                    
                    * the mapping of audio channels from a multi-channel Sound Track in a Source Package to single-channel Sound Tracks in the Material Package
                    * the mapping of audio channels from single-channel Sound Tracks in a Source Package to multi-channel Sound Tracks in the Material Package
                    
                    which is specified in Annex E of SMPTE ST 382:2007.
    [B] Header Metadata KLV Fill
        Conformance: recommended
        [A] When first created, the file includes a <KLV Fill> item of at least 8192 bytes in total length following the <Header Metadata>.
        [N] Implementation Notes
            [A] The "total length" is of the entire item and includes the length of the Key and Length fields.
                
                The extra space afforded by the KLV Fill allows Header Metadata to be edited and added to without rewriting the entire file.
    [B] MXF Indexing and Partitioning strategy for CBE Essence
        Conformance: mandatory
        [B] Index precedes Essence
            Conformance: mandatory
            [A] The file contains a complete <Index Table> before the <Essence>.
        [B] Index all Essence
            Conformance: mandatory
            [A] The <Index Table> indexes every <Edit Unit> of every <Essence Element> in the file.
        [B] Single Essence Partition
            Conformance: mandatory
            [A] The <Generic Container> is entirely contained in exactly one <Partition>.
        [N] Indexing and Partitions
            [A] It's generally considered good MXF practice to have one 'thing' per Partition, so you'd have separate Partitions for Header Metadata, Essence, and Index Tables. This isn't a requirement but following best practice is encouraged.
                
                The Index Table could be placed in the Header Partition, its own Body Partition or in a Body Partition with the Essence. Indeed it could be distributed across all three of these locations. Decoders need to be able to cope with all of these posibilities.
    [B] ST 386 with D-10 625i25 at 50 Mbps
        Conformance: mandatory
        [A] The file conforms to <SMPTE ST 386:2004> where the <Picture Essence> operates at "50 Mbit/s" using a "625/50 system".
        [N] Implementation Notes
            [A] All aspects of SMPTE ST 386:2004 must be followed. In addition to the mapping of the AES3 Sound Essence and D-10 Picture Essence, it also covers other things such as Index Tables and KAG size.
                
                The KLV Alignment Grid of any Partition containing an Essence Container must be 512.
                
                SMPTE ST 386:2004 specifies that there is exactly one Sound Track in each of the Material Package and Top-Level File Package.
                
                
                ## D-10 Picture Essence
                
                While not strictly specified, the Picture Essence has 608 lines (576 of active picture plus 32 of vertical interval), as is conventional for D-10 pictures and which is alluded to in SMPTE ST 365:2001.
                
                The constraints on Picture Essence encoding here imply a "level" of "main".
                
                Standard Definition content can have an aspect ratio of 16/9 or 4/3.
    [B] Uncompressed 24-bit PCM audio at 48 kHz
        Conformance: mandatory
        [A] For each <Audio Channel> the <Sound Essence> is "uncompressed PCM audio data" per <SMPTE ST 382:2007>, sampled at 48 kHz with 24 bits per sample.
        [N] Implementation Notes
            [A] As per Section 6 of <SMPTE ST 382:2007> samples are stored as little-endian integers.
    [B] Simple channel numbering for 8-channel AES3 element
        Conformance: mandatory
        [A] The "channel number in the <8-channel AES3 element> is the "Audio Track Number" defined in <EBU R 48> and <EBU R 123>.
    [B] AS-11 Core DM (Descriptive Metadata)
        Conformance: mandatory
        [A] The file contains exactly one instance of <DM_AS_11_Core DM Scheme>.
            [B] DM_AS_11_Core DM Scheme
                [A] This <DM Scheme> is identified by <DM_AS_11_Core> (the <DM Scheme Label>) and has the following members: <DM_AS_11_Core_Framework> (the <DM Framework>).
                    [B] DM_AS_11_Core
                        [A] http://vm-1274-user.virt.ch.bbc.co.uk/as/block/500L/artefacts/Labels.xml
                    [B] DM_AS_11_Core_Framework
                        [A] http://vm-1274-user.virt.ch.bbc.co.uk/as/block/500F/artefacts/Groups.xml
                        [A] http://vm-1274-user.virt.ch.bbc.co.uk/as/block/500F/artefacts/Elements.xml
                        [A] http://vm-1274-user.virt.ch.bbc.co.uk/as/block/500F/artefacts/Types.xml
                        [A] Metadata Constraints as Python (refer to the 'Specification Format Definition'): http://vm-1274-user.virt.ch.bbc.co.uk/as/block/500F/artefacts/dm_extras.py
        [A] The <DM Framework> instance is strongly referenced from a <Constrained Static DM Track>.
            [B] Constrained Static DM Track
                [A] A <Constrained Static DM Track> is a <Static Track (DM)> in the <Material Package> that contains a <Sequence>, which contains exactly one <DM Segment>, which strongly references an instance of a <DM Framework>.
                [N] Track Name
                    [A] The "Track Name" property of an <Constrained Static DM Track> does not identify the <DM Scheme> whose <DM Framework> it references. In the absence of other requirements for "Track Name", it is suggested that files use a value corresponding to the <DM Scheme> used in the track, e.g. "AS_11_Core", "AS_11_UKDPP".
        [N] Repetition of Header Metadata
            [A] Repetition of Header Metadata in the Footer Partition is not considered to be another instance of any of the components of that Header Metadata.
    [B] AS-11 UKDPP DM (Descriptive Metadata)
        Conformance: mandatory
        [A] The file contains exactly one instance of <DM_AS_11_UKDPP DM Scheme>.
            [B] DM_AS_11_UKDPP DM Scheme
                [A] This <DM Scheme> is identified by <DM_AS_11_UKDPP> (the <DM Scheme Label>) and has the following members: <DM_AS_11_UKDPP Framework> (the <DM Framework>).
                    [B] DM_AS_11_UKDPP
                        [A] http://vm-1274-user.virt.ch.bbc.co.uk/as/block/510L/artefacts/Labels.xml
                    [B] DM_AS_11_UKDPP Framework
                        [A] http://vm-1274-user.virt.ch.bbc.co.uk/as/block/510F/artefacts/Groups.xml
                        [A] http://vm-1274-user.virt.ch.bbc.co.uk/as/block/510F/artefacts/Elements.xml
                        [A] http://vm-1274-user.virt.ch.bbc.co.uk/as/block/510F/artefacts/Types.xml
                        [A] Metadata Constraints as Python (refer to the 'Specification Format Definition'): http://vm-1274-user.virt.ch.bbc.co.uk/as/block/510F/artefacts/dm_extras.py
        [A] The <DM Framework> instance is strongly referenced from a <Constrained Static DM Track>.
            [B] Constrained Static DM Track
                [A] A <Constrained Static DM Track> is a <Static Track (DM)> in the <Material Package> that contains a <Sequence>, which contains exactly one <DM Segment>, which strongly references an instance of a <DM Framework>.
                [N] Track Name
                    [A] The "Track Name" property of an <Constrained Static DM Track> does not identify the <DM Scheme> whose <DM Framework> it references. In the absence of other requirements for "Track Name", it is suggested that files use a value corresponding to the <DM Scheme> used in the track, e.g. "AS_11_Core", "AS_11_UKDPP".
        [N] Repetition of Header Metadata
            [A] Repetition of Header Metadata in the Footer Partition is not considered to be another instance of any of the components of that Header Metadata.
    [B] AS-11 Segmentation DM (Descriptive Metadata)
        Conformance: mandatory
        [A] The file contains exactly one <Program Segmentation Track>.
            [B] Program Segmentation Track
                [A] A <Program Segmentation Track> is a <Timeline Track> that contains a <Sequence> that is composed of zero or more <Filler> objects and one or more <DM Segment> objects.
                [A] Each <DM Segment> object in the <Program Segmentation Track> represents, and aligns with, a region of program content in the <Source Essence>.
                [A] Each <Filler> object in the <Program Segmentation Track> represents, and aligns with, a region of non-program content in the <Source Essence>.
                [N] Track Name
                    [A] The "Track Name" property of the <Program Segmentation Track> does not identify the segmentation metadata scheme. In the absence of other requirements for "Track Name", it is suggested that files use a value corresponding to the <DM Scheme> used in the track, e.g.  "AS_11_Segmentation".
                [N] Determining SOM and EOM
                    [A] The start and end timecodes for program regions, commonly referred to as "start of material" (som) and "end of material" (eom), can be determined based on the location of <DM Segment> objects on the <Program Segmentation Track> relative to the adjacent <Timecode Track> in the <Material Package> that contains the <Program Segmentation Track>.
                [N] Non-Programme Content
                    [A] Examples of non-programme content include: black, ident, clock.
                [N] Track Composition
                    [A] Constraints set out in <SMPTE ST 377-1:2011> and <SMPTE ST 378:2004> mean that the <Program Segmentation Track> is necessarily full from start to finish and is the same length as all other <Timeline Track>s in the <Material Package>.
        [A] This <Track> is in the <Material Package>.
        [A] Each <DM Segment> object in the <Track> strongly references an instance of <DM_AS_11_Segmentation>.
            [B] DM_AS_11_Segmentation
                [A] This <DM Scheme> is identified by <DM_AS_11_Segmentation> (the <DM Scheme Label>) and has the following members: <DM_AS_11_Segmentation_Framework> (the <DM Framework>).
                    [B] DM_AS_11_Segmentation
                        [A] http://www.amwa.tv/projects/rules/01/block/505L/artefacts/Labels.xml
                    [B] DM_AS_11_Segmentation_Framework
                        [A] http://www.amwa.tv/projects/rules/01/block/505F/artefacts/Groups.xml
                        [A] http://www.amwa.tv/projects/rules/01/block/505F/artefacts/Elements.xml
                        [A] http://www.amwa.tv/projects/rules/01/block/505F/artefacts/Types.xml
        [N] Implementation Notes
            [A] The <Track> can be identified by an MXF reader by the presence of <DM Segment> objects that each strongly reference an instance of the "DM_AS_11_Segmentation_Framework" <DM Framework>.
        [N] Repetition of Header Metadata
            [A] Repetition of Header Metadata in the Footer Partition is not considered to be another instance of any of the components of that Header Metadata.
    [B] Timecode constraints
        Conformance: mandatory
        [B] Timecode Track Presence
            Conformance: mandatory
            [A] The <Material Package> contains exactly one <Timecode Track>.
            [N] Implementation Notes
                [A] This Timecode Track provides "Synthetic Timecode" because its Timecode is "generated" from a single "Start Timecode" value that is associated with the beginning of the Material Package. This means that the Timecode is necessarily continuous throughout the entire playback of the MXF file.
        [B] Constrained Timecode Track in Material Package
            Conformance: mandatory
            [A] The <Timecode Track> in the <Material Package> is a <Constrained Timecode Track>.
                [B] Constrained Timecode Track
                    [A] A <Constrained Timecode Track> is a <Timecode Track>.
                    [A] The value of the "Edit Rate" property of this <Timecode Track> is the same as the value of the "Edit Rate" property of the <Picture Track> in the same <Package>.
                    [A] There is exactly one <Timecode Component> in this <Timecode Track>.
                    [A] The value of the "Rounded Timecode Base" property of the <Timecode Component> is the "Edit Rate" of this <Timecode Track> rounded to the nearest integer.
        [B] Timecode mode signalling
            Conformance: mandatory
            [A] The value of the "Drop Frame" property of the <Timecode Component> in the <Timecode Track> in the <Material Package> is "False" (indicating non-drop frame timecode is in use) except in any of the following scenarios (in which case it is "True", indicating drop frame timecode is in use):
                
                * The "Rounded Timecode Base" property of the <Timecode Component> is `60` and the "Edit Rate" of the <Timecode Track> is mathematically equal to `60000/1001`
                * The "Rounded Timecode Base" property of the <Timecode Component> is `30` and the "Edit Rate" of the <Timecode Track> is mathematically equal to `30000/1001`
            [N] Rational Numbers
                [A] Care must be taken when dealing with numbers expressed as a ratio of two integers ("rationals"). They are often used to represent temporal rates or image aspect ratios.
                    
                    When making comparisons of these values, it is insufficient to simply compare each of the numerators and each of the denominators. For example, `7/5` is mathematically equal to `14/10`.
            [N] Implementation Notes
                [A] Note that for an "Edit Rate" of 24000/1001 the "Drop Frame" property will be "False" because drop frame timecode is not applicable to this rate.
        [B] Timecode Track Precedence
            Conformance: mandatory
            [A] The <Timecode Track> in the <Material Package> defines the authoritative program timecode.
            [N] Implementation Notes
                [A] The <Timecode> defined by the <Timecode Track> in the <Material Package> must be used by all the components of a system that handles the file. Other <Timecode>s could be present in the file but these are not authoritative -- these other <Timecode>s could be used by certain systems for very specialist purposes (such as keeping track of where each frame of content originated from) but they must never be used as the authoritative / principal <Timecode> for the content.
    [B] Miscellaneous Content Constraints
        Conformance: mandatory
        [B] AFD present
            Conformance: mandatory
            [A] The "Active Format Descriptor" property of the <Picture Essence Descriptor> is present in the file.
            [N] Implementation Notes
                [A] Section G.2.5 of SMPTE ST 377-1:2011 describes compliant encoder and decoder behavior with respect to SMPTE ST 2016-1:2009.
        [B] AFD 9 10 14
            Conformance: mandatory
            [A] The 4-bit AFD encoded in the "Active Format Descriptor" property of the <Picture Essence Descriptor> is one of the following decimal values: 9 or 10 or 14.
            [N] Implementation Notes
                [A] Section G.2.5 of SMPTE ST 377-1:2011 requires that the value of the "Active Format Descriptor" property be constant for the duration of the associated Picture Track.
                    
                    The AFD (as it is used here, where only a very restricted set of values are permitted) can be considered as telling the decoder what video transformations it can reasonably make when displaying the video. For example when displaying the video on a "problematic" screen the decoder could wish to "zoom and crop" or "pillarbox" or "letterbox" the video as appropriate (where a "problematic" screen could be one where the dimensions of the screen mean that if the video is displayed full-screen it does not have the stated "aspect ratio").
        [B] 4 audio channels
            Conformance: mandatory
            [A] Only the channels in the <8-channel AES3 element> with a "channel number" of 1, 2, 3 or 4 are valid.
        [B] R48 2a customisation
            Conformance: mandatory
            [A] The number of <Audio Channel>s described by the scheme identified by the value of AS_11_Audio_Track_Layout is equal to the number of valid channels in the <8-channel AES3 element> except that a value of Layout_EBU_R_48_2a is permitted when all of the following are true:
                
                * there are four valid channels in the <8-channel AES3 element>
                * each channel in the <8-channel AES3 element> with a "channel number" of 3 or 4 contains digital silence
        [B] No Closed Captions
            Conformance: mandatory
            [A] The file does not contain closed captions.
    [B] Miscellaneous DM constraints (Descriptive Metadata)
        Conformance: mandatory
        [A] Metadata Constraints as Python (refer to the 'Specification Format Definition'): http://vm-1274-user.virt.ch.bbc.co.uk/as/block/988/artefacts/audio_track_layout.py
        [A] Metadata Constraints as Python (refer to the 'Specification Format Definition'): http://vm-1274-user.virt.ch.bbc.co.uk/as/block/988/artefacts/shim.py
        [A] Metadata Constraints as Python (refer to the 'Specification Format Definition'): http://vm-1274-user.virt.ch.bbc.co.uk/as/block/988/artefacts/picture_ratio.py



# Metadata Constraints as Python Artefacts: Specification Format Definition

This Section defines how Python Artefacts (expressing metadata constraints) in this Specification are to be interpreted.

Each Python Artefact defines checks / tests using [Python](https://www.python.org/) version 2.7. An implementation complies with a Python Artefact if it passes all of the checks / tests that the Artefact specifies. Note that the code has been designed to enhance the clarity of the test definitions rather than for efficient or compact code.

Each relevant MXF Element / property is represented as a Python variable:

* The name of the variable is set as the `Symbol` of the Element / property.
* The value of the variable must be `None` (i.e. the special Python object) if the Element / property is considered to be "absent" from the relevant KLV set in the MXF file (an Element / property is considered to be "present" in the MXF file if its 2-byte tag is present in the relevant KLV set in the MXF file and it is considered to be "absent" otherwise). Otherwise the value stored in the MXF file must be converted into the relevant Python data type (see below).

## Data Types

### UTF16String
Values of Type `UTF16String` are stored as Python Unicode strings. `UTF16String` values are assumed to have been read from the MXF file according to Section 4.3 of SMPTE ST 377-1:2011, terminating before (and discarding) any null character. Note that no other characters appearing before the null character (such as whitespace or non-printable characters) are removed. If an Element / property of type `UTF16String` is considered "present" but the above processing of the value stored in the MXF file results in zero characters in the string, the corresponding variable shall be assigned the value `""` (the empty string).

### Integers
All signed and unsigned integer types used in MXF are represented as Python integers.

### Booleans
The values of MXF Booleans are represented by the Python values `True` and `False`.

### Record Types
Any value of a "Record" Type (a Type with `TypeKind` of `Record`) is represented as a Python Dictionary. For each `Facet` (constituent part) an item is added to the Python Dictionary with a key equal to that of the `Symbol` of the `Facet`. The value for this key is set to the parsed value of the relevant portion of the Element / property value.

### Enumerations
For each `Facet` (allowed value) of an "Enumeration" Type (a Type with `TypeKind` of `Enumeration`) a Python variable is defined with:

* a name equal to that of the `Facet` `Symbol`
* a value equal to that of the `Facet` `Value`

## Helper Functions

The following helper functions are used in the Python Artefacts. They have been designed to enhance clarity rather than for efficient or compact code.

```
def CHECK(condition):
    """
    Check that the provided 'condition' (Boolean) is True.

    If the provided 'condition' is False this is a 'Fail' -- the implementation
    does not comply with the constraint.
   
    """

    try:
        assert condition == True
    except AssertionError:
        print "Check failed -- compliance has not been achieved"

```

```
def PRESENT(variable):
    """
    Return a Boolean to indicate whether the Element / property represented by
    the 'variable' is present in the MXF file.
    
    'Presence' of an Element / property is determined by the presence of its
    2-byte tag in the relevant KLV set in the MXF file. The Python variable
    representing an MXF Element / property is assumed to be None if, and
    only if, that Element / property is considered not present in the MXF file.

    """

    if variable is not None:
        return True
    else:
        return False
```


THIS AMWA SPECIFICATION IS BEING OFFERED WITHOUT ANY WARRANTY WHATSOEVER,
AND IN PARTICULAR, ANY WARRANTY OF NON-INFRINGEMENT IS EXPRESSLY DISCLAIMED.
ANY USE OF THIS SPECIFICATION SHALL BE MADE ENTIRELY AT THE IMPLEMENTER'S
OWN RISK, AND NEITHER AMWA, NOR ANY OF ITS MEMBERS OR CONTRIBUTORS, SHALL
HAVE ANY LIABILITY WHATSOEVER TO ANY IMPLEMENTER OR THIRD PARTY FOR ANY
DAMAGES OF ANY NATURE WHATSOEVER, DIRECTLY OR INDIRECTLY, ARISING FROM THE
USE OF THIS SPECIFICATION.

Readers are advised that any IPR contribution forms associated with this
project are available from the [AMWA](http://amwa.tv/)


(c) AMWA 2016, Licensed under the Apache License, Version 2.0

The following license applies to all parts of this Specification except
as documented below:

====

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this Specification except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

====

All files located in the "include" directory are externally maintained
libraries used by this Specification which have their own licenses; we
recommend you read them, as their terms may differ from the terms above.
